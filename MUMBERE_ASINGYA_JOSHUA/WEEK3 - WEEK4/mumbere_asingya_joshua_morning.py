# ########## DAY 6 ############
# Advanced topics in python

""" summary
> Regular expressions
> Generators and iterators
> Decorators
> Context managers
> Multithreading and multiprocessing

"""

# Regular Expressions
""" summary
\d: Matches any digit (0-9).
\w: Matches any alphanumeric character (a-z, A-Z, 0-9, and underscore)
\s: Matches any whitespace character (space, tab, newline)
.: Matches any character except a newline.
*: Matches zero or more occurances of the preceding character or group
+: Matches one or more occurances of the preceding character or group.
?: Matches zero or one occurances of the preceding character or group.
[ ]: Matches any character within the square brackets.
[^ ]: Matches any character not within the square brackets.
^: Matches the start of a line.
$: Matches the end of a line.
"""

# Matching and Searching
# regex re.match(), re.search(), re.findall()

# Example 1 Demonstrating regex | Match First word, Match Group words, Match all numbers
# import re
# text = "Hello, my name is Rogers. I am a programmer with 3years of experience"

# # Match First Word
# match = re.search(r"^\w*", text)
# if match:
#     print("Match: ",match.group())

# # Match numbers
# matches = re.findall(r"\d", text)
# print("Matches: ", matches)

# Example 2 Validate email or email address
# import re

# def validate_email(email):
#     # pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
#     pattern = r'\b[a-zA-Z0-9.+-]+@[a-z]+\.[a-z]{2,}\b'

#     if re.match(pattern, email):
#         return True
#     else:
#         return False

# # Usage
# email1 = 'birimumaaso.14roja@gmail.com'
# email2 = 'birimumaaso14roja@gmail.com' 

# print(validate_email(email1))
# print(validate_email(email2))


# Generators and Iterators
# Generators are defined by the 'yield' keyword
# Iterators are objects that implement the iterator protocols using "_iter_", "_next_"

# def generate_numbers():
#   """A generator that yields numbers from 1 to 10."""
#   for i in range(1, 11):
#     yield i

# # Print the first 5 numbers generated by the generator.
# for number in generate_numbers():
#   print(number)

# def factorial(n):
#     # Return the factorial of a number
#     if n == 0 or n == 1:
#         return 1
#     else:
#         return n * factorial(n - 1)
        
# def generate_factorials():
#     for i in range(1,10):
#         yield factorial(i)

# # Print the factorial of a number from 1 - 10
# for fact in generate_factorials() :
#     print(fact)


# For iterators
# def squares():
#     for i in range(1, 10):
#         yield i ** 2

# squares_iterator = squares()

# for i in range(5):
#     print(next(squares_iterator))


# Decorators @my_decorator //They're used to modify the behaviour of functions or classes without modifying the underlying code
# def my_decorator(func):
#     def inner():
#         print("This is the decorator")
#         func()
#         print("Goodbye")
#     return inner
    
# @my_decorator
# def outer_decorator():
#     print("This is outer decorator")

# outer_decorator()


# ########## DAY 7 ############
# Python for DATA SCIENCE

""" summary
> NumPy - Numerical python, helps one to work with arrays
> Pandas - Functionalities, data cleaning, data transformation, merging, filtering
Data visualization
Plotting - use library called matplotlib/ seaborn 
"""
# Understanding data science workflow
"""
1. Problem definition
2. Data acquisition data.gov, kaggle, API's, External datasets
Ensure data quality, data validation, cleaning and processing
EDA(Exploratory Data Analysis)
"""

"""
# Today: Data preparation and prepocessing
- Missing data
- Wrong Format
- Null values
"""


















